:PROPERTIES:
:ID:       dac1bfd8-304a-47bc-9394-38decc66549a
:END:
#+title: Book Allocation Problem
#+filetags: :CS:

Given an [[id:5adf9d6d-4832-420c-8c61-41d7747a47d1][array]] =a[n]=, where =n= is the number of books in a library and =a[i]= represents the number of pages in a book; =k= is the number of students in the college. We're supposed to distribute the books in a contiguous manner such that each student has to read minimum number of pages.

- All books need to be distributed
- One book goes to a single student
- Each student gets atleast one book

#+begin_example
n = 4
a = [10, 20, 30, 40]
k = 2

ans = 60
#+end_example

* Approach
1. We're going to apply [[id:53b8c21d-c96a-4e92-bbd7-7ff176bec026][Binary Search]] algorithm. We need to find the maximum number of pages per student; so that is going to be our number line (where we search).
2. The bounds for the search are as follows:
   - Since each student needs to get atleast one book, we take the book with the maximum number of pages: 40 in our example and consider it to be the lower bound, because that's going to be the maximum number of pages a student can read provided he gets a single book.
   - The upper bound is 100.
3. The midpoint value =m = (l + r) / 2= denotes the maximum number of pages a student can read.
4. Calculate the number of students required to read these many pages at max.
5. If the required number of students is greater than the actual amount, then increase the number of pages per student (go right).
6. If the required number of students is less than the actual amount, then decrease the number of pages per student (go left).
7. If the required number of students is equal to the actual number of students, return the number of pages.

** Important observation
Observe the array given in the example. It isn't possible for 2 students read a maximum of =a[0] = 10= pages each to cover all the books. Similarly, it isn't possible for each student to read a maximum of =a[0] + a[1] = 30= pages to cover all the books, but it is possible for them to read =a[0] + a[1] + a[2] = 60= pages to cover all the books. So if we look at the =possible()= function, it is going to look like:
#+begin_src 
a =        [10, 20, 30, 40]
possible = [ F,  F,  T,  T]
#+end_src

Going by this logic, we're able to apply binary search algorithm.

* Code
** Possible function
This function checks whether for the given distribution of pages amongst the books =a=, it is possible for the given number of =students= to read at max the specified number of =pages= in order to cover all the books.
#+begin_src c++
bool possible(const vi& a, int pages, int students) {
    int s = 0;
    int students_required = 1;
    for(int page : a) {
      if(page > pages) return false;

      if(s + page > pages) {
        ++students_required;
        s = page;

        if(students_required > students) return false;
      } else s += page;
    }
    return true;
  }
#+end_src

** Solution
#+begin_src c++
    void solve() {
    int n, k; cin >> n >> k;
    vi a(n);
    int mn = 0, S = 0;
    REP(i, n) {
      cin >> a[i];
      mn = min(mn, a[i]);
      S += a[i];
    }

    int l = mn, r = S, ans = r;
    while(l <= r) {
      int m = l + (r - l) / 2;
      if(possible(a, m, k)) {
        ans = m;
        r = m - 1;
      } else l = m + 1;
    }
    cout << ans << '\n';
  }
#+end_src
