#include <bits/stdc++.h>

#define deb(x) cout << #x << " = " << x << endl

#define MOD 1000000007

#define REP(i, n) for(int i = 0; i < (n); ++i)
#define FOR(i, s, n) for(int i = (s); i < (n); ++i)

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
typedef vector<string> vs;
typedef vector<vector<string>> vvs;

template<typename T>
void print_vec(const vector<T>& v) {
  for(const T& i : v) cout << i << ' ';
  cout << '\n';
}

struct Node {
 int data;
  struct Node *left;
  struct Node *right;
  
  Node (int x) : data(x), left(nullptr), right(nullptr) {}
  Node (int x, Node *l, Node *r) : data(x), left(l), right(r) {}
};

int height(Node *root) {
  if(root == nullptr) return 0;
  return max(height(root->left), height(root->right)) + 1;
}

void printBFS(Node *root) {
  if(root == nullptr) return;
  queue<Node*> q;
  q.push(root);

  while(!q.empty()) {
    Node *curr = q.front();
    cout << curr->data << ' ';
    if(curr->left != nullptr) q.push(curr->left);
    if(curr->right != nullptr) q.push(curr->right);
    q.pop();
  }
  cout << endl;
}

void deleteTree(Node* head) {
  if(head == nullptr) return;

  deleteTree(head->left);
  deleteTree(head->right);
  delete head;
}

vector<Node*> getPath(Node* root, Node* a) {
  vector<Node*> ans;
  if(root == nullptr) return ans;

  stack<Node*> st;

  while(!st.empty() || root) {
	if(root) {
	  st.push(root);
	  if(root == a) {
		while(!st.empty()) {
		  ans.push_back(st.top());
		  st.pop();
		}
		break;
	  }
	  root = root->left;
	} else {
	  root = st.top()->right;
	  st.pop();
	}
  }
  reverse(ans.begin(), ans.end());
  return ans;
}

void solve() {
  Node* head = new Node(10);
  head->left = new Node(20);
  head->left->left = new Node(40);
  head->left->right = new Node(50);
  head->right = new Node(30);

  Node *p = head->left->left, *q = head->left->right;

  vector<Node*> vp = getPath(head, p), vq = getPath(head, q);

  int i1 = 0, i2 = 0;
  while(i1 < vp.size() && i2 < vq.size()) {
	
  }

  deleteTree(head);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  solve();
  return 0;
}
