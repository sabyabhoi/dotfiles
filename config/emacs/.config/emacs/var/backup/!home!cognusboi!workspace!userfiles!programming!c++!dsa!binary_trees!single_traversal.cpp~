#include <bits/stdc++.h>

#define deb(x) cout << #x << " = " << x << endl

#define MOD 1000000007

#define REP(i, n) for(int i = 0; i < (n); ++i)
#define FOR(i, s, n) for(int i = (s); i < (n); ++i)

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
typedef vector<string> vs;
typedef vector<vector<string>> vvs;

template<typename T>
void print_vec(const vector<T>& v) {
  for(const T& i : v) cout << i << ' ';
  cout << '\n';
}

struct Node {
 int data;
  struct Node *left;
  struct Node *right;
  
  Node (int x) : data(x), left(nullptr), right(nullptr) {}
  Node (int x, Node *l, Node *r) : data(x), left(l), right(r) {}
};

int height(Node *root) {
  if(root == nullptr) return 0;
  return max(height(root->left), height(root->right)) + 1;
}

void printBFS(Node *root) {
  if(root == nullptr) return;
  queue<Node*> q;
  q.push(root);

  while(!q.empty()) {
    Node *curr = q.front();
    cout << curr->data << ' ';
    if(curr->left != nullptr) q.push(curr->left);
    if(curr->right != nullptr) q.push(curr->right);
    q.pop();
  }
  cout << endl;
}

void deleteTree(Node* head) {
  if(head == nullptr) return;

  deleteTree(head->left);
  deleteTree(head->right);
  delete head;
}

void traverse(Node* root) {
  stack<pair<Node*, int>> st;
  st.push({root, 1});

  vi pre, post, in;

  while(!st.empty()) {
	auto t = st.top();
	st.pop();

	switch (t.second) {
	case 1:
	  pre.push_back(t.first->data);
	  t.second++;
	  st.push(t);
	  if(t.first->left)
		st.push({t.first->left, 1});
	  break;
	case 2:
	  in.push_back(t.first->data);
	  t.second++;
	  st.push(t);
	  if(t.first->right)
		st.push({t.first->right, 1});
	  break;
	case 3:
	  post.push_back(t.first->data);
	  break;
	default:
	  break;
	}
  }
  cout << "inorder: ";
  print_vec(in);
  cout << "preorder: ";
  print_vec(pre);
  cout << "postorder: ";
  print_vec(post);
}

void solve() {
  Node* head = new Node(10);
  head->left = new Node(20);
  head->left->left = new Node(40);
  head->left->right = new Node(50);
  head->right = new Node(30);

  traverse(head);

  deleteTree(head);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  solve();
  return 0;
}
