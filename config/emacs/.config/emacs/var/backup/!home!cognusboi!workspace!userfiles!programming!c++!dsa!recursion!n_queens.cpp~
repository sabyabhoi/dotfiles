#include <bits/stdc++.h>

#define deb(x) cout << #x << " = " << x << endl

#define MOD 1000000007

#define REP(i, n) for(int i = 0; i < (n); ++i)
#define FOR(i, s, n) for(int i = (s); i < (n); ++i)

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
typedef vector<string> vs;
typedef vector<vector<string>> vvs;

template<typename T>
void print_vec(const vector<T>& v) {
  for(const T& i : v) cout << i << ' ';
  cout << '\n';
}

bool possible(const vs& board, int row, int col, int n) {
  for(int r = row, c = col; r >= 0 && c >= 0; --r, --c)
	if(board[r][c] == 'Q') return false;

  for(int r = row, c = col; r < n && c >= 0; ++r, --c)
	if(board[r][c] == 'Q') return false;

  for(int c = col; c >= 0; --c)
	if(board[row][c] == 'Q') return false;

  return true;
}

void helper(vs& board, int col, int n, vvs& ans) {
  if (col >= n) {
    ans.push_back(board);
    return;
  }
  for(int r = 0; r < n; ++r) {
	if(!possible(board, r, col, n)) continue;
	board[r][col] = 'Q';
	helper(board, col + 1, n, ans);
	board[r][col] = '.';
  }
}

void solve() {
  int n; cin >> n;
  vs board(n);
  REP(i, n) {
	REP(j, n) board[i].push_back('.');
  }

  vvs ans;
  helper(board, 0, n, ans);
  for(vs v : ans) {
	print_vec(v);
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int t;
  cin >> t;
  while (t--)
    solve();
  return 0;
}
