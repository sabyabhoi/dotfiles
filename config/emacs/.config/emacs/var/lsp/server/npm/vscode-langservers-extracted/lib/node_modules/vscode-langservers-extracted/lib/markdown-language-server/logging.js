"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.string.pad-start.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.consoleLogger = exports.LogFunctionLogger = void 0;

var LogFunctionLogger = /*#__PURE__*/function () {
  function LogFunctionLogger(_logFn) {
    _classCallCheck(this, LogFunctionLogger);

    this._logFn = _logFn;
  }

  _createClass(LogFunctionLogger, [{
    key: "log",
    value: function log(level, title, message, data) {
      this.appendLine("[".concat(level, " ").concat(LogFunctionLogger.now(), "] ").concat(title, ": ").concat(message));

      if (data) {
        this.appendLine(LogFunctionLogger.data2String(data));
      }
    }
  }, {
    key: "appendLine",
    value: function appendLine(value) {
      this._logFn(value);
    }
  }], [{
    key: "now",
    value: function now() {
      var now = new Date();
      return String(now.getUTCHours()).padStart(2, '0') + ':' + String(now.getMinutes()).padStart(2, '0') + ':' + String(now.getUTCSeconds()).padStart(2, '0') + '.' + String(now.getMilliseconds()).padStart(3, '0');
    }
  }, {
    key: "data2String",
    value: function data2String(data) {
      if (data instanceof Error) {
        if (typeof data.stack === 'string') {
          return data.stack;
        }

        return data.message;
      }

      if (typeof data === 'string') {
        return data;
      }

      return JSON.stringify(data, undefined, 2);
    }
  }]);

  return LogFunctionLogger;
}();

exports.LogFunctionLogger = LogFunctionLogger;
exports.consoleLogger = new LogFunctionLogger(console.log);