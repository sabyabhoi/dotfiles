snippet cc "Competitive Coding Template"
  #include <bits/stdc++.h>
  #include <ext/pb_ds/assoc_container.hpp>
  #include <ext/pb_ds/tree_policy.hpp>
  
  #define deb(x) cout << #x << " = " << x << endl
  
  #define REP(i, n) for(int i = 0; i < (n); ++i)
  #define FOR(i, s, n) for(int i = (s); i < (n); ++i)
  #define int long long int
  #define sz(a) (int)a.size()
  
  using namespace std;
  using namespace __gnu_pbds;
  
  typedef long long ll;
  typedef unsigned long long ull;
  typedef vector<int> vi;
  typedef vector<vi> vvi;
  typedef pair<int, int> pii;
  typedef vector<pii> vp;
  typedef vector<bool> vb;
  typedef vector<vb> vvb;
  typedef vector<string> vs;
  typedef vector<vector<string>> vvs;
  typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key
  const ll MOD = 1e9 + 7;

  ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
  ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
  ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
  ll mod_exp(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
  ll mod_inv(ll a, ll m) { return mod_exp(a, m - 2, m); }
  ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mod_inv(b, m), m) + m) % m;}  //only for prime m

  mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
  ll getRandomNumber(ll l, ll r) { // get random number in [l, r] (both inclusive)
  	return uniform_int_distribution<ll>(l, r)(rng);
  }

  template <typename T1, typename T2>
  std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
  }

  template <typename ele_type>
  ostream &operator<<(ostream &os, const vector<ele_type> &vect_name) {
  	for (auto itr : vect_name) {
  		os << itr << " ";
  	}
  	return os;
  }

  void solve() {
    $1
  }

  int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
  	int t; cin >> t;
  	while(t--) solve();
    return 0;
  }

snippet bt "Binary Tree"
  struct Node {
   int data;
    struct Node *left;
    struct Node *right;
    
    Node (int x) : data(x), left(nullptr), right(nullptr) {}
    Node (int x, Node *l, Node *r) : data(x), left(l), right(r) {}
  };
  
  int height(Node *root) {
    if(root == nullptr) return 0;
    return max(height(root->left), height(root->right)) + 1;
  }
  
  void printBFS(Node *root) {
    if(root == nullptr) return;
    queue<Node*> q;
    q.push(root);
  
    while(!q.empty()) {
      Node *curr = q.front();
      cout << curr->data << ' ';
      if(curr->left != nullptr) q.push(curr->left);
      if(curr->right != nullptr) q.push(curr->right);
      q.pop();
    }
    cout << endl;
  }
  
  void deleteTree(Node* head) {
    if(head == nullptr) return;
  
    deleteTree(head->left);
    deleteTree(head->right);
    delete head;
  }
  
  Node *construct(const vi& a) {
    if(a.empty()) return nullptr;
    Node* root = new Node(a[0]);
  
    queue<Node*> q;
    q.push(root);
  
    int count = 0;
    for(int i = 1; i < (int) a.size(); ++i) {
    s:
  	Node *curr = q.front();
  	switch (count) {
      case 0:
        count = 1;
        if (a[i] != -1) {
          Node *tmp = new Node(a[i]);
          curr->left = tmp;
          q.push(tmp);
        }
        break;
      case 1:
        count = 2;
        if (a[i] != -1) {
          Node *tmp = new Node(a[i]);
          curr->right = tmp;
          q.push(tmp);
        }
        break;
      case 2:
        q.pop();
        count = 0;
        goto s;
      default:
        break;
      }
    }
    return root;
  }

snippet trie "Trie Data Structure"
	struct Trie {
		Trie *children[26];
		bool end;

		Trie() {
			REP(i, 26) children[i] = nullptr;
			end = false;
		}

		void insert(const string &s) {
			Trie *itr = this;
			for (char c : s) {
				int i = c - 'a';
				if (itr->children[i] == nullptr)
					itr->children[i] = new Trie();
				itr = itr->children[i];
			}
			itr->end = true;
		}

		bool search(const string &s) {
			Trie *itr = this;
			for (char c : s) {
				int i = c - 'a';
				if (itr->children[i] == nullptr)
					return false;
				itr = itr->children[i];
			}
			return true;
		}
		bool empty() {
			REP(i, 26) {
				if (this->children[i] != nullptr)
					return false;
			}
			return true;
		}
	};
	Trie *delete_key(Trie *t, int i, const string &s) {
		if (t == nullptr)
			return nullptr;

		if (i == s.length()) {
			t->end = false;
			if (t->empty()) {
				delete t;
				t = nullptr;
			}
			return t;
		}

		int ix = s[i] - 'a';
		t->children[ix] = delete_key(t->children[ix], i + 1, s);
		if (t->empty() && !t->end) {
			delete t;
			t = nullptr;
		}
		return t;
	}

	void delete_trie(Trie *t) {
		if (t == nullptr)
			return;

		REP(i, 26) { delete_trie(t->children[i]); }
		delete t;
	}

snippet interact "Interactor"
  struct Interactor {
    int hiddenNumber;
    int maxQueries;
    int queries;
  
    Interactor() {
      hiddenNumber = getRandomNumber(2, 100);
      maxQueries = 20;
      queries = 0;
    }
  
    string query(int val) {
      assert(queries < maxQueries);
      queries++;
  
      return hiddenNumber % val == 0 ? "yes" : "no";
    }
  
    void answer(int ans) {
      if (ans == hiddenNumber) {
        cout << "PASSED" << endl;
      } else {
        cout << "FAILED" << endl;
        cout << "Actual value: " << hiddenNumber << "\tValue Received: " << ans
             << endl;
      }
    }
  };

snippet choose "nCr with precomputation"
	// Make sure to set the size accordingly
  const int SZ = 1e6 + 1; 
  int fact[SZ], ifact[SZ];
  
  void init_fact() {
    fact[0] = fact[1] = 1;
  
    FOR(i, 1, SZ) fact[i] = mod_mul(fact[i - 1], i, MOD);
  
    ifact[SZ - 1] = mod_inv(fact[SZ - 1], MOD);
    for (int i = SZ - 2; i >= 1; --i)
      ifact[i] = mod_mul(ifact[i + 1], i + 1, MOD);
  }
  
  int choose(int n, int r) {
    return mod_mul(mod_mul(fact[n], ifact[r], MOD), ifact[n - r], MOD);
  }

snippet binexp "Binary Exponentiation"
  int binexp(int a, int b) {
    int res = 1;
    while (b) {
      if (b & 1)
        res = res * a;
      a = a * a;
      b >>= 1ll;
    }
    return res;
  }

snippet fileio "File IO"
	freopen("$1.in", "r", stdin);
	freopen("$1.out", "w", stdout);
